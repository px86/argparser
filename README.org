#+TITLE: argparser - A header only command line arguments parsing library for C++17
#+AUTHOR: Pushkar Raj

* About

=argparser= is a header only command line arguments parsing library, for C++17 and later.

NOTE: this is the development branch, so expect bugs, and abrupt changes in the api.

* Installation

Download and =#include= the =argparser.hpp= header file into your C++ application.

* Usage

Options can be passed in the following formats:

1. =--key VAL=
2. =--key=VAL=
3. =-k=VAL=
4. =-k VAL=
5. =-kVAL= - BUG: program crashes

Note: currently sticking multiple short options together is not supported.

* Example

#+begin_src cpp
  #include "argparser.hpp"
  #include <array>
  #include <cstdlib>
  #include <iostream>

  int main(int argc, char** argv)
  {
      // Initialize static variables with default value.
      static bool flag = false;
      static int key = 0;
      static double ratio = 0.0;
      static const char* filepath = "";

      static constexpr auto options = std::array {
          pr::opt("flag", 'f', "set the flag to true", &flag),
          pr::opt("key", 'k', "key value (int)", &key),
          pr::opt("ratio", 'r', "ratio (double)", &ratio),
          pr::opt("file", 'p', "ratio (double)", &filepath),
      };

      pr::init<options>();

      std::cout << "Default Values\n"
                << "flag=" << flag << '\n'
                << "key=" << key << '\n'
                << "ratio=" << ratio << '\n'
                << "filepath=" << filepath << '\n'
                << std::endl;

      pr::parse<options>(argc, argv);

      std::cout << "After Parsing\n"
                << "flag=" << flag << '\n'
                << "key=" << key << '\n'
                << "ratio=" << ratio << '\n'
                << "filepath=" << filepath
                << std::endl;

      return EXIT_SUCCESS;
  }
#+end_src


* Notes

- TODO: add =--help= option
- TODO: give helpful error messages, when invalid arguments are passed
- TODO: find better name for functions (e.g. pr::init)
- TODO: change namespace name
